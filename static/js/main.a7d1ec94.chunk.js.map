{"version":3,"sources":["router/PrivateRoute.js","components/Forms/utils.tsx","components/Forms/constants.tsx","components/Forms/Forms.tsx","App.js","index.js"],"names":["PrivateRoute","Component","component","rest","render","props","validation","Yup","email","required","password","min","matches","confirm","oneOf","where","message","initialFormValues","Forms","initialValues","onSubmit","values","actions","data","fetch","method","headers","body","JSON","stringify","setSubmitting","validationSchema","htmlFor","type","name","text","className","as","value","id","App","exact","path","React","ReactDOM","StrictMode","document","getElementById"],"mappings":"8PAQeA,EANM,SAAH,GAA2C,IAA1BC,EAAS,EAApBC,UAAyBC,EAAI,iBACnD,OACE,cAAC,IAAK,2BAAKA,GAAI,IAAEC,OAAQ,SAACC,GAAK,OAAK,cAACJ,EAAS,2BAAKE,GAAUE,GAAS,IAE1E,E,gBCJaC,EAAaC,IAAW,CAC7BC,MAAOD,MACJE,SAAS,YACTD,MAAM,yBACTE,SAAUH,MACPE,SAAS,yBACTE,IAAI,EAAG,+BACPC,QAAQ,WAAY,oDACvBC,QAASN,MACNE,SAAS,iCACTK,MAAM,CAACP,IAAQ,YAAa,MAAO,yBACtCQ,MAAOR,MAAaE,SAAS,uDAC7BO,QAAST,MACNE,SAAS,uDACTE,IAAI,GAAI,uDChBNM,EAAoB,CAC7BT,MAAO,GACPE,SAAU,GACVG,QAAS,GACTE,MAAO,GACPC,QAAS,IC4EEE,G,OAxED,WAWZ,OACE,8BACE,cAAC,IAAM,CACLC,cAAeF,EACfG,SAAU,SAACC,EAAgCC,GAd1B,IAACC,IAeDF,EAdrBG,MAAM,+CAAgD,CACpDC,OAAQ,OACRC,QAAQ,CACN,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAUjBD,EAAQQ,eAAc,EACxB,EACAC,iBAAkBzB,EAAW,SAE5B,kBACC,eAAC,IAAI,WACH,uBAAO0B,QAAQ,QAAO,mBACtB,cAAC,IAAK,CAACC,KAAK,QAAQC,KAAK,QAAQC,KAAK,UACtC,cAAC,IAAY,CAACD,KAAK,QAAQhC,UAAU,MAAMkC,UAAU,eAErD,uBAAOJ,QAAQ,WAAU,uBACzB,cAAC,IAAK,CAACC,KAAK,WAAWC,KAAK,WAAWC,KAAK,aAC5C,cAAC,IAAY,CACXD,KAAK,WACLhC,UAAU,MACVkC,UAAU,eAGZ,uBAAOJ,QAAQ,UAAS,oCACxB,cAAC,IAAK,CAACC,KAAK,WAAWC,KAAK,UAAUC,KAAK,YAC3C,cAAC,IAAY,CACXD,KAAK,UACLhC,UAAU,MACVkC,UAAU,eAGZ,uBAAOJ,QAAQ,QAAO,oBACtB,eAAC,IAAK,CAACK,GAAG,SAASH,KAAK,QAAO,UAC7B,wBAAQI,MAAM,GAAE,uBAChB,wBAAQA,MAAM,aAAY,wBAC1B,wBAAQA,MAAM,WAAU,sBACxB,wBAAQA,MAAM,SAAQ,uBAExB,cAAC,IAAY,CACXJ,KAAK,QACLhC,UAAU,MACVkC,UAAU,eAGZ,uBAAOJ,QAAQ,WAAU,sBACzB,cAAC,IAAK,CAACK,GAAG,WAAWE,GAAG,UAAUL,KAAK,YACvC,cAAC,IAAY,CACXA,KAAK,UACLhC,UAAU,MACVkC,UAAU,eAGZ,wBAAQH,KAAK,SAAQ,sBAChB,KAKjB,GC1EMO,EAAG,kHAWN,OAXM,mCACP,WACI,OACE,cAAC,IAAM,UACL,qBAAKJ,UAAU,MAAK,SAClB,cAAC,IAAM,UACJ,cAAC,EAAY,CAACK,OAAK,EAACC,KAAK,IAAIxC,UAAWgB,SAKrD,KAAC,EAXM,CAAUyB,IAAM1C,WAcVuC,ICdfI,IAASxC,OACP,cAAC,IAAMyC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.a7d1ec94.chunk.js","sourcesContent":["import { Route } from \"react-router-dom\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route {...rest} render={(props) => <Component {...rest} {...props} />} />\n  );\n};\n\nexport default PrivateRoute;\n","import * as Yup from \"yup\";\n\nexport const validation = Yup.object({\n        email: Yup.string()\n          .required(\"Required\")\n          .email(\"It's should be emile.\"),\n        password: Yup.string()\n          .required(\"Password is required.\")\n          .min(8, \"Your password is too short.\")\n          .matches(/[a-zA-Z]/, \"Password must contain latin letters and numbers.\"),\n        confirm: Yup.string()\n          .required(\"Confirm password is required.\")\n          .oneOf([Yup.ref(\"password\"), null], \"Passwords must match.\"),\n        where: Yup.string().required(\"Please select something this field cannot be empty.\"),\n        message: Yup.string()\n          .required(\"Please leave a message, this field cannot be empty.\")\n          .min(20, \"Your message must contain at least 20 characters.\"),\n      })\n","export const initialFormValues = {\n    email: \"\",\n    password: \"\",\n    confirm: \"\",\n    where: \"\",\n    message: \"\",\n  }","import React, { useState, useEffect } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FormikHelpers } from \"formik\";\n\n\nimport { validation } from \"./utils\";\nimport {initialFormValues} from './constants';\nimport {InitialFormValuesTypes} from './types';\nimport \"./styles.css\";\n\nconst Forms = () => {\n  const submittingData = (data: any) => {\n    fetch('https://a708-89-28-121-208.ngrok.io/item/add', {\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data) \n    })\n  }\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialFormValues}\n        onSubmit={(values: InitialFormValuesTypes, actions: FormikHelpers<InitialFormValuesTypes>) => {\n          submittingData(values)\n          actions.setSubmitting(false);\n        }}\n        validationSchema={validation}\n      >\n        {() => (\n          <Form>\n            <label htmlFor=\"email\">From:</label>\n            <Field type=\"email\" name=\"email\" text=\"email\" />\n            <ErrorMessage name=\"email\" component=\"div\" className=\"validation\" />\n\n            <label htmlFor=\"password\">Password:</label>\n            <Field type=\"password\" name=\"password\" text=\"password\" />\n            <ErrorMessage\n              name=\"password\"\n              component=\"div\"\n              className=\"validation\"\n            />\n\n            <label htmlFor=\"confirm\">Password confirmation:</label>\n            <Field type=\"password\" name=\"confirm\" text=\"confirm\" />\n            <ErrorMessage\n              name=\"confirm\"\n              component=\"div\"\n              className=\"validation\"\n            />\n\n            <label htmlFor=\"where\">Where:</label>\n            <Field as=\"select\" name=\"where\">\n              <option value=\"\">Select...</option>\n              <option value=\"developers\">Developers</option>\n              <option value=\"managers\">Managers</option>\n              <option value=\"devops\">Devops</option>\n            </Field>\n            <ErrorMessage\n              name=\"where\"\n              component=\"div\"\n              className=\"validation\"\n            />\n\n            <label htmlFor=\"message:\">Message:</label>\n            <Field as=\"textarea\" id=\"message\" name=\"message\" />\n            <ErrorMessage\n              name=\"message\"\n              component=\"div\"\n              className=\"validation\"\n            />\n\n            <button type=\"submit\">Submit</button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default Forms;\n","import React from \"react\";\nimport {BrowserRouter as Router, Switch} from \"react-router-dom\";\nimport PrivateRoute from \"./router/PrivateRoute\"\nimport Forms from \"./components/Forms/Forms\"\n\nclass App extends  React.Component {\n  render(){\n      return (\n        <Router>\n          <div className=\"app\">\n            <Switch>\n               <PrivateRoute exact path=\"/\" component={Forms}/>\n            </Switch>\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}